name: common-build-publish-sofa-package

on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      runner:
        required: true
        type: string
      platform:
        required: true
        type: string        
      python:
        required: false
        type: string
      recipe-dir:
        required: true
        type: string
      channel:
        required: true
        type: string
    secrets:
      api-key:
        required: true

jobs:
  build-publish-sofa:
    name: "${{ inputs.package-name }} - ${{ inputs.platform }} (py${{ inputs.python }} ) conda packages on ${{ inputs.runner }}"
    runs-on: ${{ inputs.runner }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # We force to use a conda env located close to filesystem root on Windows to bypass a compilation bug with SOFA
    # due to too long filename, even if LongPath registry key is enabled
    - name: Install miniconda [Windows]
      if: contains(inputs.runner, 'windows')
      uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: c:\so
        auto-update-conda: true
        miniforge-version: latest

    - name: Install miniconda [Linux x64 & macOS]
      if: contains(inputs.runner, 'windows') == false && !(contains(inputs.runner, 'ubuntu') && contains(inputs.runner, 'arm'))
      uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: sofa-conda-ci
        auto-update-conda: true
        miniforge-version: latest

    - name: Install miniconda [Linux aarch64]
      if: contains(inputs.runner, 'ubuntu') && contains(inputs.runner, 'arm')
      uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: sofa-conda-ci
        auto-update-conda: true
        miniforge-version: latest
        architecture: aarch64

    - name: Install conda environment
      shell: bash -l {0}
      run: |
        conda install rattler-build -c conda-forge

      # Same remark here about too long filename bug on windows, we have to force the output directory accordingly on windows
    - name: Setup output directory
      shell: bash -l {0}
      run: |
        if [[ ${{ inputs.runner }} == "windows"* ]]; then
          echo "PKG_DIR=c:/so/bld" >> $GITHUB_ENV
        else
          echo "PKG_DIR=$CONDA_PREFIX/rattler-bld" >> $GITHUB_ENV
        fi

    - name: Show conda config
      shell: bash -l {0}
      run: |
        conda info
        conda list
        conda config --show-sources
        conda config --show
        printenv | sort

    # Same remark here about too long filename bug on windows, we have to force the output directory accordingly on windows
    - name: Build conda package
      shell: bash -l {0}
      run: |
        conda info
        cd conda/recipes/${{ inputs.recipe-dir }}
         if [ ! -z "${{ inputs.python }}" ]; then
           rattler-build build --recipe ${{ inputs.package-name }}/recipe.yaml --variant-config ../../configs/${{ inputs.platform }}.yaml --variant-config ../../configs/python-${{ inputs.python }}.yaml --output-dir $PKG_DIR --experimental -c conda-forge -c https://prefix.dev/${{ inputs.channel }} --channel-priority disabled
         else
           rattler-build build --recipe ${{ inputs.package-name }}/recipe.yaml --variant-config ../../configs/${{ inputs.platform }}.yaml --output-dir $PKG_DIR --experimental -c conda-forge -c https://prefix.dev/${{ inputs.channel }} --channel-priority disabled
         fi

    # Remove already existing package if any
    - name: Remove existing package
      shell: bash -l {0}
      run: |
        cd $PKG_DIR/${{ inputs.platform }}
        for file in *${{ inputs.package-name }}*.conda; do
          curl -X DELETE https://prefix.dev/api/v1/delete/${{ inputs.channel }}/${{ inputs.platform }}/$file -H "Authorization: Bearer ${{ secrets.api-key }}"
        done

    - name: Publish conda package
      shell: bash -l {0}
      run: |
        for file in $PKG_DIR/**/*${{ inputs.package-name }}*.conda; do
          rattler-build upload prefix -c ${{ inputs.channel }} --api-key ${{ secrets.api-key }} "$file"
        done